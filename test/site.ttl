# Let's make a Web site with FALSE!

# I'll be using a lot of the stuff FALSE has defined for us, so I'll declare a prefix first.
@prefix : <http://id.colourcountry.net/false/> .
# This means that when you see an ID like :Site, it refers to something defined by FALSE,
# in this case <http://www.colourcountry.net/false/model/Site>

# I will also be using SKOS quite a bit.
# SKOS defines simple things like labels, notes on concepts, and relations between them.
@prefix skos: <http://www.w3.org/2004/02/skos/core#> .
# In addition I'll grab XSD for its dateTime type, which FALSE uses.
@prefix xsd:   <http://www.w3.org/2001/XMLSchema#> .

# We can start defining things now.

<site> a :Site .
# This statement defines a Web site with ID <site>.
# URLs always go in angle brackets.
# FALSE interprets URLs relative to a base URL defined in run_me.sh. Use relative URLs for entities you're going to define yourself.

# Give the web site a name.
<site> skos:prefLabel "FALSE demo site"@en .

# And some content for the front page. Multi-line content goes in triple quotes.
<site> :markdown """
This web site demonstrates as many features of FALSE as I could fit in.

This text comes from the [](markdown) in the site definition file.

![](whatisfalse)
"""
.
# In the Markdown above, [](markdown) is a link, and ![](whatisfalse) is an embedded object.
# We need to define these documents so that FALSE can link them up. Here's a more condensed way to define an object.

<whatisfalse> a :Document
;  skos:prefLabel "What is FALSE?"@en
.
# <whatisfalse> doesn't have content defined directly. Instead FALSE will look in this directory
# for matching files, like "whatisfalse.md", and automatically connect them to the document.

<markdown> a :Document
;  skos:prefLabel "Markdown"@en
;  :updated "2018-10-12T10:18:00.000Z"^^xsd:dateTime
;  :markdown
"""
FALSE supports all the features of standard Markdown,
but links and embeds are more powerful than standard Markdown.
Download the source file to see how things are done.

## Linking to things

You can link to any document using its ID: here is one about [](templates)

URLs are relative to the base ID supplied to the build process, so you can easily link to the documents you've defined.
(Absolute URLs are ok, but note that any prefixes defined in the TTL aren't accessible to markdown.)

When linking to a document, if you don't supply link text, FALSE will use the document's title.

The document gets a "links to" relationship which you can use in [templates][1].

[Links to external Web resources](https://daringfireball.net/projects/markdown/syntax) still work in the normal way.

If you use the link syntax for something that's not a document, you get a ["mentions"][2] relationship.

## Embedding content

Embeds use the syntax of images in Markdown, but extend it.
If you've defined an image as a Content (or a sub-type, like Picture), then you can embed it by its ID like this

![](lingshed)

The embedded image is automatically rendered in a nice way, with a link leading to its own page.
And because the image has a caption defined, and a description for the alt-text, there is no need to supply these every time you embed it.

This isn't limited to images: any document can be embedded, including other documents written in Markdown.
(Use templates and CSS to determine whether users know that something was embedded, or not.)

![](reusable)

You can't embed something that isn't a Content, only link to it.

If you just want to embed an image from the internet, you can still do that, but you don't get <s>a cookie</s> the extra features.

![a kitten](http://placekitten.com/150/150)

### Teasers

<false-content context="http://id.colourcountry.net/false/teaser" src="http://id.colourcountry.net/world/India">
<false-content context="http://id.colourcountry.net/false/teaser" src="mentions">

Teasers are a fancy way to link to another entity. You can link to anything, it doesn't have to be Content.

The special `<false-content>` HTML tag provides access to these,
assuming you have defined an [appropriate template][1].

### Advanced embedding

Regular embeds can also be specified with `<false-content>` though I am not sure why you'd want to.

<false-content context="http://id.colourcountry.net/false/embed" src="lingshed"></false-content>

In future FALSE may allow you to define your own contexts and refer to them in this way.

[1]: templates "Footnote style links are also supported."
[2]: mentions
"""@en
.

<templates> a :Document
;  skos:prefLabel "Templates"@en
;  :markdown
"""
FALSE uses Jinja2 templates to build its pages.
"""@en
.

<reusable> a :Document
;  skos:prefLabel "Reusable content"@en
.

<renditions> a :Document
;  :featuresOn <site>
;  skos:prefLabel "Renditions"@en
;  :updated "2018-10-15T23:08:00.000+01:00"^^xsd:dateTime
;  :markdown
"""
A rendition is a representation of a document,
for example as a media file.

You are reading a rendition of this document
sourced from inline markdown in the TTL.

FALSE will look for additional renditions
in files in the same directory that match the ID.

This document's ID is `renditions` so FALSE will
look for files beginning `renditions`:

  * `renditions.md`
  * `renditions.html`
  * `renditions.mp4`
  * `renditions.svg`

and so on.

Templates can access these using `{{ rendition }}`.

FALSE will choose the rendition most suitable for presenting on a Web site
and generate HTML code for it that can be included using `{{ html }}`.
"""@en
.
